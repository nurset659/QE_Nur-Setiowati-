{
	"info": {
		"_postman_id": "093c34c9-3723-4c3c-9884-b68e83bc0682",
		"name": "Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25390193",
		"_collection_link": "https://www.postman.com/orange-trinity-129621/workspace/miniprojectalta/collection/25390193-093c34c9-3723-4c3c-9884-b68e83bc0682?action=share&creator=25390193&source=collection_link"
	},
	"item": [
		{
			"name": "Register TC(+)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"12345\",\r\n    \"fullname\":\"Nur Setiiowati\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/register",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register invalid method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"12345\",\r\n    \"fullname\":\"Nur Setiiowati\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/register",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Duplikat ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"12345\",\r\n    \"fullname\":\"Nur \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/register",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Data tidak lengkap",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"NC@gmail.com\",\r\n    \"password\":\"\",\r\n    \"fullname\":\"NU K K \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/register",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login TC (+)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/login",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Invalid method",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/login",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Invalid Data",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\" s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/login",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Data Tidak Lengkap",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"nukchn4@gmail.com\",\r\n    \"password\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/login",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user information TC(+)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6Ik51ciBTZXRpaW93YXRpIiwiRW1haWwiOiJudWtjaG40QGdtYWlsLmNvbSJ9.bSXFE_Sd_dIA8P24gvVm37qjECg2F9fH7XqfeCHMsSk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/info",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user information invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6Ik51ciBTZXRpaW93YXRpIiwiRW1haWwiOiJudWtjaG40QGdtYWlsLmNvbSJ9.bSXFE_Sd_dIA8P24gvVm37qjECg2F9fH7XqfeCHMsSk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/info",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user information Invalid method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJGdWxsbmFtZSI6Ik51ciBTZXRpaW93YXRpIiwiRW1haWwiOiJudWtjaG40QGdtYWlsLmNvbSJ9.bSXFE_Sd_dIA8P24gvVm37qjECg2F9fH7XqfeCHMsSk",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/info",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user information Tanpa token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.get(\"variable_key\");\r",
							"pm.globals.get(\"variable_key\");\r",
							"pm.variables.get(\"variable_key\");\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"pm.collectionVariables.set(\"variable_key\", \"variable_value\");\r",
							"pm.environment.unset(\"variable_key\");\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"pm.globals.unset(\"variable_key\");\r",
							"pm.collectionVariables.unset(\"variable_key\");\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"var jsonObject = xml2Json(responseBody);\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://altashop-api.fly.dev/api/auth/info",
					"protocol": "https",
					"host": [
						"altashop-api",
						"fly",
						"dev"
					],
					"path": [
						"api",
						"auth",
						"info"
					]
				}
			},
			"response": []
		}
	]
}